gridRow <- matrix(rep(oneRow, nrow(stk)), byrow=TRUE)
oneColO <- rep(1, ncol(stk))
oneColE <- rep(0, ncol(stk))
gridCol <- matrix(rep(c(oneColO, oneColE), nrow(stk)/2), byrow=TRUE)
stkRow <- terra:: subset(stk, 1)
stkCol <- terra::subset(stk, 1)
stkRow[] <- gridRow
stkCol[] <- gridCol
octMask <- stkCol*stkRow
writeRaster(octMask, "C:\\Users\\amaxwel6\\Dropbox\\code_dev\\geodl\\data\\elev\\octMask5.tif")
gaussMatrix <- matrix(c(1, 4, 6, 4, 1,
4, 16, 24, 16, 4,
6, 24, 36, 24, 6,
4, 16, 24, 16, 4,
1, 4, 6, 4, 1), nrow=5, ncol=5)/255
r <- focal(stk, w=gaussMatrix)
oneRow <- rep(c(1,0), ncol(stk)/2)
gridRow <- matrix(rep(oneRow, nrow(stk)), byrow=TRUE)
oneColO <- rep(1, ncol(stk))
oneColE <- rep(0, ncol(stk))
gridCol <- matrix(rep(c(oneColO, oneColE), nrow(stk)/2), byrow=TRUE)
stkRow <- terra:: subset(stk, 1)
stkCol <- terra::subset(stk, 1)
stkRow[] <- gridRow
stkCol[] <- gridCol
octMask <- stkCol*stkRow
stkZeros <- r*octMask
r2 <- focal(stkZeros, w=gaussMatrix)*4
writeRaster(r2, "C:\\Users\\amaxwel6\\Dropbox\\code_dev\\geodl\\data\\elev\\gp1.tif")
citation()
library(micer)
biData <- micer::biData
View(biData)
library(micer)
mcData <- micer::biData
mice(mcData$ref,
mcData$pred,
mappings=c("Barren", "Forest", "Impervious", "Low
Vegetation", "Mixed Dev", "Water"),
multiclass=TRUE)
mice(mcData$ref,
mcData$pred,
mappings=c("Barren", "Forest", "Impervious", "Low Vegetation", "Mixed Dev", "Water"),
multiclass=TRUE)
mice <- function(reference, #Factor of correct/reference labels
prediction,#Factor of predicted labels
mappings=levels(as.factor(reference)), #Names of classes (if not provided, will use factor levels)
multiclass = TRUE, #TRUE for multiclass, FALSE for binary
positiveIndex = 1 #Index for the positive case (only used for binary classification
){
positiveIndex <- as.numeric(positiveIndex) #Make sure index is numeric
ctab <- table(reference, prediction) #generate contingency table
colnames(ctab) <- mappings #Apply class names to columns
rownames(ctab) <- mappings #Apply class names to rows
dimnames(ctab) <- setNames(dimnames(ctab),c("Predicted", "Reference")) #Label row axis as "predicted" and column axis as "reference"
refCnts <- colSums(ctab) #Get column total counts
names(refCnts) <- mappings #Name column counts
predCnts <- rowSums(ctab) #Get row total counts
names(predCnts) <- mappings #Name row counts
oa <- sum(diag(ctab))/sum(ctab) #Calcualte overall accuracy
sumCols <- colSums(ctab)
sumRows <- rowSums(ctab)
sumColsN <- (sumCols/sum(sumCols))+.00001 #calculate nj/n
sumColsN2 <- sumColsN*sumColsN #square nj/n
oa0 <- sum(sumColsN2) #calculate random model correction
mice <- (oa-oa0)/(1-oa0) #Calculate MICE
ua <- diag(ctab)/(sumRows +.00001) #Calculate all class user's accuracies (i.e., precisions)
pa <- diag(ctab)/(sumCols +.00001) #Calculate all class producer's accuracies (i.e., recalls)
f1 <- (2*ua*pa)/(ua+pa) #Calculate all class F1-scores ((2*Precision*Recall)/(precision+recall))
rtbice <- (pa - sumColsN)/(1- sumColsN) #Calculate all reference-total-based image classification efficacies
ctbice <- (ua - sumColsN)/(1- sumColsN) #Calcualte all classification-total-based image classification efficacies
f1Efficacy <- (2*rtbice*ctbice)/(rtbice+ctbice) #Calculate F1-scores with efficacy-based correction
if(multiclass==TRUE){
#Add names to all vectors
names(ua) <- mappings
names(pa) <- mappings
names(rtbice) <- mappings
names(ctbice) <- mappings
names(f1) <- mappings
names(f1Efficacy) <- mappings
#Macro-average all UAs/precisions, PAs/recalls, and F1-scores for class-aggregated metrics
macroUA <- mean(ua)
macroPA <- mean(pa)
macroF1 <- (2*macroUA*macroPA)/(macroUA+macroPA)
#Macro-average all efficiacy-based measusures for class-aggregated metrics
macroRTBICE <- mean(rtbice)
macroCTBICE <- mean(ctbice)
macrof1Efficacy <- (2*macroRTBICE*macroCTBICE)/(macroRTBICE+macroCTBICE)
#Return list object for multiclass classification
return(list(Mappings = mappings,
confusionMatrix = ctab,
referenceCounts = refCnts,
predictionCounts = predCnts,
overallAccuracy = oa,
MICE = mice,
usersAccuracies = ua,
CTBICEs = ctbice,
producersAccuracies = pa,
RTBICEs = rtbice,
f1Scores = f1,
f1Efficacies = f1Efficacy,
macroPA = macroPA,
macroRTBUCE = macroRTBICE,
macroUA = macroUA,
macroCTBICE = macroCTBICE,
macroF1 = macroF1,
macroF1Efficacy = macrof1Efficacy
)
)
}else{
#Return list object for binary classification
negativeIndex = 2 - positiveIndex
return(list(Mappings = mappings,
confusionMatrix = ctab,
referenceCounts = refCnts,
predictionCounts = predCnts,
positiveCase = mappings[positiveIndex],
overallAccuracy = oa,
mice = mice,
Precision = unname(ua)[positiveIndex],
precisionEfficacy = unname(ctbice)[positiveIndex],
NPV = unname(ua)[negativeIndex],
npvEfficacy = unname(ctbice)[negativeIndex],
Recall = unname(pa)[positiveIndex],
recallEfficacy = unname(rtbice)[positiveIndex],
Specificity = unname(pa)[negativeIndex],
specificityEfficicacy = unname(rtbice)[negativeIndex],
f1Score = unname(f1)[positiveIndex],
f1ScoreEfficacy = unname(f1Efficacy)[positiveIndex]
)
)
}
}
mice(mcData$ref,
mcData$pred,
mappings=c("Barren", "Forest", "Impervious", "Low Vegetation", "Mixed Dev", "Water"),
multiclass=TRUE)
mcData <- micer::mcData
mice(mcData$ref,
mcData$pred,
mappings=c("Barren", "Forest", "Impervious", "Low Vegetation", "Mixed Dev", "Water"),
multiclass=TRUE)
mice(mcData$ref,
mcData$pred,
mappings=c("Barren", "Forest", "Impervious", "Low Vegetation", "Mixed Dev", "Water"),
multiclass=TRUE)
miceResultMC <- mice(mcData$ref,
mcData$pred,
mappings=c("Barren", "Forest", "Impervious", "Low Vegetation", "Mixed Dev", "Water"),
multiclass=TRUE)
print(miceResult)
miceResultMC <- mice(mcData$ref,
mcData$pred,
mappings=c("Barren", "Forest", "Impervious", "Low Vegetation", "Mixed Dev", "Water"),
multiclass=TRUE)
print(miceResultMC)
miceResultMC <- mice(mcData$ref,
mcData$pred,
mappings=c("Barren", "Forest", "Impervious", "Low Vegetation", "Mixed Dev", "Water"),
multiclass=TRUE)
print(miceResultMC)
miceResultMC <- mice(mcData$ref,
mcData$pred,
mappings=c("Barren", "Forest", "Impervious", "Low Vegetation", "Mixed Dev", "Water"),
multiclass=TRUE)
print(miceResultMC)
miceResultMC <- mice(mcData$ref,
mcData$pred,
mappings=c("Barren", "Forest", "Impervious", "Low Vegetation", "Mixed Dev", "Water"),
multiclass=TRUE)
print(miceResultMC)
mcData <- micer::mcData
mcData <- micer::mcData
biData <- micer::biData
mice(biData$ref,
biData$pred,
mappings = c("Mined", "Not Mined"),
multiclass=FALSE,
positiveIndex=1)
mcData <- micer::mcData
miceResultMC <- mice(mcData$ref,
mcData$pred,
mappings=c("Barren",
"Forest",
"Impervious",
"Low Vegetation",
"Mixed Dev",
"Water"),
multiclass=TRUE)
cmMC <- table(mcData$ref, mcData$pred)
miceMCResult <- miceCM(cmMC,
mappings=c("Barren",
"Forest",
"Impervious",
"Low Vegetation",
"Mixed Dev",
"Water"),
multiclass=TRUE)
print(miceResultMC)
mcData <- micer::mcData
miceResultMC <- mice(mcData$ref,
mcData$pred,
mappings=c("Barren",
"Forest",
"Impervious",
"Low Vegetation",
"Mixed Dev",
"Water"),
multiclass=TRUE)
cmMC <- table(mcData$ref, mcData$pred)
miceResultMC <- miceCM(cmMC,
mappings=c("Barren",
"Forest",
"Impervious",
"Low Vegetation",
"Mixed Dev",
"Water"),
multiclass=TRUE)
print(miceResultMC)
biData <- micer::biData
miceResultBI <- mice(biData$ref,
biData$pred,
mappings = c("Mined", "Not Mined"),
multiclass=FALSE,
positiveIndex=1)
cmB <- table(biData$ref, biData$pred)
miceResultBI <- miceCM(cmB,
mappings=c("Mined", "Not Mined"),
multiclass=FALSE,
positiveIndex=1)
print(miceResultBI)
biData <- micer::biData
miceResultBI <- mice(biData$ref,
biData$pred,
mappings = c("Mined",
"Not Mined"),
multiclass=FALSE,
positiveIndex=1)
cmB <- table(biData$ref, biData$pred)
miceResultBI <- miceCM(cmB,
mappings=c("Mined",
"Not Mined"),
multiclass=FALSE,
positiveIndex=1)
print(miceResultBI)
ciResultsBi <- miceCI(rep=1000,
frac=.7,
biData$ref,
biData$pred,
lowPercentile=0.025,
highPercentile=0.975,
mappings = c("Mined",
"Not Mined"),
multiclass=FALSE,
positiveIndex=1)
print(ciResultsBi)
ciResultsBi <- miceCI(rep=1000,
frac=.7,
mcData$ref,
mcData$pred,
lowPercentile=0.025,
highPercentile=0.975,
mappings=c("Barren",
"Forest",
"Impervious",
"Low Vegetation",
"Mixed Dev",
"Water"),
multiclass=TRUE)
print(ciResultsMC)
compareData <- micer::compareData
compareResult <- miceCompare(ref=compareData$ref,
result1=compareData$rfPred,
result2=compareData$dtPred,
reps=1000,
frac=.7)
miceCompare <- function(ref, result1, result2, reps, frac){
#Compare two models using bootstrapping and paired t-test
#https://www.tmwr.org/compare
inData <- data.frame(ref=ref, result1=result1, result2=result2)
resultsDF <- data.frame(mice1 = numeric(),
mice2 = numeric())
i <- 1
while(i <= reps){
subData <- inData |> dplyr::sample_frac(frac, replace=TRUE)
ctab1 <- table(subData$ref, subData$result1)
oa1 <- sum(diag(ctab1))/sum(ctab1)
sumCols1 <- colSums(ctab1)
sumRows1 <- rowSums(ctab1)
sumColsN1 <- (sumCols1/sum(sumCols1))+.00001
sumColsN21 <- sumColsN1*sumColsN1
oa01 <- sum(sumColsN21)
mice1 <- (oa1-oa01)/(1-oa01)
ctab2 <- table(subData$ref, subData$result2)
oa2 <- sum(diag(ctab2))/sum(ctab2)
sumCols2 <- colSums(ctab2)
sumRows2 <- rowSums(ctab2)
sumColsN2 <- (sumCols2/sum(sumCols2))+.00001
sumColsN22 <- sumColsN2*sumColsN2
oa02 <- sum(sumColsN22)
mice2 <- (oa2-oa02)/(1-oa02)
bootResults <- data.frame(mice1 = mice1,
mice2 = mice2)
resultsDF <- dplyr::bind_rows(resultsDF, bootResults)
i <- i+1
}
)
miceCompare <- function(ref, result1, result2, reps, frac){
#Compare two models using bootstrapping and paired t-test
#https://www.tmwr.org/compare
inData <- data.frame(ref=ref, result1=result1, result2=result2)
resultsDF <- data.frame(mice1 = numeric(),
mice2 = numeric())
i <- 1
while(i <= reps){
subData <- inData |> dplyr::sample_frac(frac, replace=TRUE)
ctab1 <- table(subData$ref, subData$result1)
oa1 <- sum(diag(ctab1))/sum(ctab1)
sumCols1 <- colSums(ctab1)
sumRows1 <- rowSums(ctab1)
sumColsN1 <- (sumCols1/sum(sumCols1))+.00001
sumColsN21 <- sumColsN1*sumColsN1
oa01 <- sum(sumColsN21)
mice1 <- (oa1-oa01)/(1-oa01)
ctab2 <- table(subData$ref, subData$result2)
oa2 <- sum(diag(ctab2))/sum(ctab2)
sumCols2 <- colSums(ctab2)
sumRows2 <- rowSums(ctab2)
sumColsN2 <- (sumCols2/sum(sumCols2))+.00001
sumColsN22 <- sumColsN2*sumColsN2
oa02 <- sum(sumColsN22)
mice2 <- (oa2-oa02)/(1-oa02)
bootResults <- data.frame(mice1 = mice1,
mice2 = mice2)
resultsDF <- dplyr::bind_rows(resultsDF, bootResults)
i <- i+1
}
return(t.test(resultsDF$mice1, resultsDF$mice2, paired=TRUE))
}
compareData <- micer::compareData
compareResult <- miceCompare(ref=compareData$ref,
result1=compareData$rfPred,
result2=compareData$dtPred,
reps=1000,
frac=.7)
print(compareResult)
biData <- micer::biData
install.packages("devtools")
devtools::document()
devtools::document()
biData <- micer::biData
devtools::document()
devtools::document()
rm(list = c("mice", "miceCI", "miceCM", "miceCompare"))
devtools::document()
devtools::document()
library(micer)
mcData <- micer::mcData
devtools::document()
devtools::document()
devtools::document()
devtools::document()
micer::biData
devtools::document()
load("C:/Users/amaxwel6/Dropbox/code_dev/miceR/micer/data/biData.rda")
devtools::document()
rm(list = c("mice", "miceCI", "miceCM", "miceCompare"))`
)
)
'
)
))
biData <- data(biData)
biData
data(biData)
devtools::document()
data(biData)
biData |> dplyr::group_by(ref) |> count()
biData |> dplyr::group_by(ref) |> dplyr::count()
data(mcData)
mcData |> dplyr::group_by(ref) |> dplyr::count()
data(compareData)
compareData |> dplyr::group_by(ref) |> dplyr::count()
devtools::document()
library(micer)
data(mcData)
miceResultMC <- mice(mcData$ref,
mcData$pred,
mappings=c("Barren",
"Forest",
"Impervious",
"Low Vegetation",
"Mixed Dev",
"Water"),
multiclass=TRUE)
cmMC <- table(mcData$ref, mcData$pred)
miceResultMC <- miceCM(cmMC,
mappings=c("Barren",
"Forest",
"Impervious",
"Low Vegetation",
"Mixed Dev",
"Water"),
multiclass=TRUE)
print(miceResultMC)
data(biData)
miceResultBI <- mice(biData$ref,
biData$pred,
mappings = c("Mined",
"Not Mined"),
multiclass=FALSE,
positiveIndex=1)
cmB <- table(biData$ref, biData$pred)
miceResultBI <- miceCM(cmB,
mappings=c("Mined",
"Not Mined"),
multiclass=FALSE,
positiveIndex=1)
print(miceResultBI)
data(mcData)
ciResultsBi <- miceCI(rep=1000,
frac=.7,
mcData$ref,
mcData$pred,
lowPercentile=0.025,
highPercentile=0.975,
mappings=c("Barren",
"Forest",
"Impervious",
"Low Vegetation",
"Mixed Dev",
"Water"),
multiclass=TRUE)
print(ciResultsMC)
data(mcData)
ciResultsMC <- miceCI(rep=1000,
frac=.7,
mcData$ref,
mcData$pred,
lowPercentile=0.025,
highPercentile=0.975,
mappings=c("Barren",
"Forest",
"Impervious",
"Low Vegetation",
"Mixed Dev",
"Water"),
multiclass=TRUE)
print(ciResultsMC)
data(biData)
ciResultsBi <- miceCI(rep=1000,
frac=.7,
biData$ref,
biData$pred,
lowPercentile=0.025,
highPercentile=0.975,
mappings = c("Mined",
"Not Mined"),
multiclass=FALSE,
positiveIndex=1)
print(ciResultsBi)
data(compareData)
compareResult <- miceCompare(ref=compareData$ref,
result1=compareData$rfPred,
result2=compareData$dtPred,
reps=1000,
frac=.7)
print(compareResult)
data(compareData)
compareResult <- miceCompare(ref=compareData$ref,
result1=compareData$rfPred,
result2=compareData$dtPred,
reps=1000,
frac=.7)
print(compareResult)
data(compareData)
set.seed(42)
compareResult <- miceCompare(ref=compareData$ref,
result1=compareData$rfPred,
result2=compareData$dtPred,
reps=1000,
frac=.7)
print(compareResult)
data(compareData)
set.seed(42)
compareResult <- miceCompare(ref=compareData$ref,
result1=compareData$rfPred,
result2=compareData$dtPred,
reps=1000,
frac=.7)
print(compareResult)
devtools::use_gpl_license()
usethis::use_gpl3_license()
usethis::use_readme_rmd()
devtools::document()
devtools::check(cran=TRUE)
View(ciResultsBi)
devtools::check(cran=TRUE)
devtools::check(cran=TRUE)
devtools::check(cran=TRUE)
usethis::use_readme_md()
devtools::document()
library(micer)
devtools::build_manual()
devtools::build_site()
setwd("C:/Users/vidcg/Dropbox/code_dev/miceR/micer/")
devtools::build_site()
devtools::build_site()
devtools::build_site()
devtools::build_site()
library(micer)
devtools::build_site()
