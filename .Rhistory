voxelGrid <- expand.grid(x=xCoords, y=yCoords, z=zCoords)
#Calculate range distance from sensor to voxel center
voxelGrid <- voxelGrid |>
mutate(rng = sqrt(x^2 + y^2 + z^2))
#Calculate center theta and phi coordinates in degrees
voxelGridS <- as.data.frame(cart2sph(voxelGrid$x, voxelGrid$y, voxelGrid$z)) |>
dplyr::select(theta, phi) |>
transmute(theta = theta*(180/pi),
phi = phi*(180/pi))
voxelGrid <- bind_cols(voxelGrid, voxelGridS)
voxelGrid <- voxelGrid |>
mutate(thetaID = as.factor(round(theta,0)),
phiID = as.factor(round(phi,0))) |>
mutate(rayID = as.factor(paste0(thetaID, "_", phiID)))
voxelGrid$ID <- 1:nrow(voxelGrid)
# Work with Real LiDAR ----------------------------------------------------
#Extract coordinates
cld <- as.data.frame(cbind(x=tlsData@data$X,
y=tlsData@data$Y,
z=tlsData@data$Z))
#Math to calculate where ray would intersect a sphere with a radius of 1,000 m (the reference sphere)
cld$a <- cld$x^2 + cld$y^2 + cld$z^2
cld$t1 <- -sqrt(0^2-(4*cld$a*(-maxD^2)))/(2*cld$a)
cld$t2 <- sqrt(0^2-(4*cld$a*(-maxD^2)))/(2*cld$a)
cld$x1 <- cld$x*cld$t1
cld$y1 <- cld$y*cld$t1
cld$z1 <- cld$z*cld$t1
cld$x2 <- cld$x*cld$t2
cld$y2 <- cld$y*cld$t2
cld$z2 <- cld$z*cld$t2
cld$slp <- cld$z/(sqrt(cld$x^2+ cld$y^2))
cld$slp1 <- cld$z1/(sqrt(cld$x1^2+ cld$y1^2))
cld$slp2 <- cld$z2/(sqrt(cld$x2^2+ cld$y2^2))
#Find correct coordinate based on slope
cld<-cld %>% mutate(xs = case_when(sign(slp)==sign(slp1)~ x1,sign(slp)!=sign(slp1)~x2),
ys = case_when(sign(slp)==sign(slp1)~ y1,sign(slp)!=sign(slp1)~y2),
zs = case_when(sign(slp)==sign(slp1)~ z1,sign(slp)!=sign(slp1)~z2))
#Get spherical coordinates in radians
actualPulses <- as.data.frame(cart2sph(x=cld$xs,
y=cld$ys,
z=cld$zs))
actualPulses <- actualPulses[,c(1,2)]
#Convert radian coordinates to degrees
actualPulses$theta <- actualPulses$theta*(180/pi)
actualPulses$phi <- actualPulses$phi*(180/pi)
#Define grid of regularly spaced coordinates (theta, phi)
phiSeq <- seq(minPhi, maxPhi, phiStep)
thetaSeq <- seq(minTheta, maxTheta, thetaStep)
scanGrid = expand.grid(theta= thetaSeq,
phi= phiSeq)
names(scanGrid) <- c("theta", "phi")
#Find the actual coordinate that is closest to each new coordinate
kDist <- FNN::get.knnx(as.matrix(actualPulses),
as.matrix(scanGrid),
algo="kd_tree", k=1)
scanGrid$matchDist = as.vector(kDist$nn.dist)
#Filter out new coordinates that are more than specified distance from actual coordinates (estimate of pulses without returns)
newPulses <- scanGrid |>
filter(matchDist > thetaStep-tolerance) |>
dplyr::select(theta, phi)
combinedPulses <- bind_rows(actualPulses, newPulses)
# Summarize to Voxel Grid -------------------------------------------------
voxelGrid2 <- voxelGrid |>
dplyr::select(theta, phi)
kDistActual <- FNN::get.knnx(as.matrix(actualPulses),
as.matrix(voxelGrid2),
algo="kd_tree",
k=1)
kDistAll <- FNN::get.knnx(as.matrix(combinedPulses),
as.matrix(voxelGrid2),
algo="kd_tree",
k=1)
voxelIDs <- voxelGrid |>
dplyr::select(rayID, ID)
actualIndices <-data.frame(ID= kDistActual$nn.index) |>
group_by(ID) |>
summarize(allReturns = n()) |>
ungroup()
allIndices <- data.frame(ID = kDistAll$nn.index) |>
group_by(ID) |>
summarize(allPulses = n()) |>
ungroup()
voxelGrid <- voxelGrid |>
left_join(actualIndices, by="ID") |>
left_join(allIndices, by="ID") |>
mutate(across(everything(), ~ tidyr::replace_na(., 0)))
rayCnts <- voxelGrid |>
group_by(rayID) |>
summarize(pathPulses = sum(allPulses),
pathReturns = sum(allReturns))
priorReturns <- voxelGrid |>
arrange(rayID, rng) |>
group_by(rayID) |>
mutate(priorReturns = cumsum(allReturns) - allReturns) |>
ungroup() |>
dplyr::select(ID, priorReturns)
voxelGrid <- voxelGrid |>
left_join(priorReturns, by="ID") |>
mutate(across(everything(), ~ tidyr::replace_na(., 0)))
library(rlas)
library(dplyr)
library(geometry)
library(FNN)
library(spatialEco)
sHgt <- 2
minD <- -30.5
maxD <- 30.5
maxHght <- 50
voxSize <- 0.25
tolerance <- 0
minTheta <- -180
maxTheta <- 180
minPhi <- -60.3322
maxPhi <- 86.8053
thetaStep <- 0.0658972
phiStep <- 0.054425
tlsData <- readLAS("E:/warrenGrove/tlsData/lasData/original/pre/WG34.las")
# Make Voxel Grid ---------------------------------------------------------
#Define regular grid in Cartesian space
xCoords <- seq(minD, maxD, voxSize)
yCoords <- seq(minD, maxD, voxSize)
zCoords <- seq(sHgt, maxHght, voxSize)
voxelGrid <- expand.grid(x=xCoords, y=yCoords, z=zCoords)
#Calculate range distance from sensor to voxel center
voxelGrid <- voxelGrid |>
mutate(rng = sqrt(x^2 + y^2 + z^2))
#Calculate center theta and phi coordinates in degrees
voxelGridS <- as.data.frame(cart2sph(voxelGrid$x, voxelGrid$y, voxelGrid$z)) |>
dplyr::select(theta, phi) |>
transmute(theta = theta*(180/pi),
phi = phi*(180/pi))
voxelGrid <- bind_cols(voxelGrid, voxelGridS)
voxelGrid <- voxelGrid |>
mutate(thetaID = as.factor(round(theta,0)),
phiID = as.factor(round(phi,0))) |>
mutate(rayID = as.factor(paste0(thetaID, "_", phiID)))
voxelGrid$ID <- 1:nrow(voxelGrid)
# Work with Real LiDAR ----------------------------------------------------
#Extract coordinates
cld <- as.data.frame(cbind(x=tlsData@data$X,
y=tlsData@data$Y,
z=tlsData@data$Z))
#Math to calculate where ray would intersect a sphere with a radius of 1,000 m (the reference sphere)
cld$a <- cld$x^2 + cld$y^2 + cld$z^2
cld$t1 <- -sqrt(0^2-(4*cld$a*(-maxD^2)))/(2*cld$a)
cld$t2 <- sqrt(0^2-(4*cld$a*(-maxD^2)))/(2*cld$a)
cld$x1 <- cld$x*cld$t1
cld$y1 <- cld$y*cld$t1
cld$z1 <- cld$z*cld$t1
cld$x2 <- cld$x*cld$t2
cld$y2 <- cld$y*cld$t2
cld$z2 <- cld$z*cld$t2
cld$slp <- cld$z/(sqrt(cld$x^2+ cld$y^2))
cld$slp1 <- cld$z1/(sqrt(cld$x1^2+ cld$y1^2))
cld$slp2 <- cld$z2/(sqrt(cld$x2^2+ cld$y2^2))
#Find correct coordinate based on slope
cld<-cld %>% mutate(xs = case_when(sign(slp)==sign(slp1)~ x1,sign(slp)!=sign(slp1)~x2),
ys = case_when(sign(slp)==sign(slp1)~ y1,sign(slp)!=sign(slp1)~y2),
zs = case_when(sign(slp)==sign(slp1)~ z1,sign(slp)!=sign(slp1)~z2))
#Get spherical coordinates in radians
actualPulses <- as.data.frame(cart2sph(x=cld$xs,
y=cld$ys,
z=cld$zs))
actualPulses <- actualPulses[,c(1,2)]
#Convert radian coordinates to degrees
actualPulses$theta <- actualPulses$theta*(180/pi)
actualPulses$phi <- actualPulses$phi*(180/pi)
#Define grid of regularly spaced coordinates (theta, phi)
phiSeq <- seq(minPhi, maxPhi, phiStep)
thetaSeq <- seq(minTheta, maxTheta, thetaStep)
scanGrid = expand.grid(theta= thetaSeq,
phi= phiSeq)
names(scanGrid) <- c("theta", "phi")
#Find the actual coordinate that is closest to each new coordinate
kDist <- FNN::get.knnx(as.matrix(actualPulses),
as.matrix(scanGrid),
algo="kd_tree", k=1)
scanGrid$matchDist = as.vector(kDist$nn.dist)
#Filter out new coordinates that are more than specified distance from actual coordinates (estimate of pulses without returns)
newPulses <- scanGrid |>
filter(matchDist > thetaStep-tolerance) |>
dplyr::select(theta, phi)
combinedPulses <- bind_rows(actualPulses, newPulses)
# Summarize to Voxel Grid -------------------------------------------------
voxelGrid2 <- voxelGrid |>
dplyr::select(theta, phi)
kDistActual <- FNN::get.knnx(as.matrix(actualPulses),
as.matrix(voxelGrid2),
algo="kd_tree",
k=1)
kDistAll <- FNN::get.knnx(as.matrix(combinedPulses),
as.matrix(voxelGrid2),
algo="kd_tree",
k=1)
voxelIDs <- voxelGrid |>
dplyr::select(rayID, ID)
actualIndices <-data.frame(ID= kDistActual$nn.index) |>
group_by(ID) |>
summarize(allReturns = n()) |>
ungroup()
allIndices <- data.frame(ID = kDistAll$nn.index) |>
group_by(rayID) |>
summarize(allPulses = n()) |>
ungroup()
library(rlas)
library(dplyr)
library(geometry)
library(FNN)
library(spatialEco)
sHgt <- 2
minD <- -30.5
maxD <- 30.5
maxHght <- 50
voxSize <- 0.25
tolerance <- 0
minTheta <- -180
maxTheta <- 180
minPhi <- -60.3322
maxPhi <- 86.8053
thetaStep <- 0.0658972
phiStep <- 0.054425
tlsData <- readLAS("E:/warrenGrove/tlsData/lasData/original/pre/WG34.las")
# Make Voxel Grid ---------------------------------------------------------
#Define regular grid in Cartesian space
xCoords <- seq(minD, maxD, voxSize)
yCoords <- seq(minD, maxD, voxSize)
zCoords <- seq(sHgt, maxHght, voxSize)
voxelGrid <- expand.grid(x=xCoords, y=yCoords, z=zCoords)
#Calculate range distance from sensor to voxel center
voxelGrid <- voxelGrid |>
mutate(rng = sqrt(x^2 + y^2 + z^2))
#Calculate center theta and phi coordinates in degrees
voxelGridS <- as.data.frame(cart2sph(voxelGrid$x, voxelGrid$y, voxelGrid$z)) |>
dplyr::select(theta, phi) |>
transmute(theta = theta*(180/pi),
phi = phi*(180/pi))
voxelGrid <- bind_cols(voxelGrid, voxelGridS)
voxelGrid <- voxelGrid |>
mutate(thetaID = as.factor(round(theta,0)),
phiID = as.factor(round(phi,0))) |>
mutate(rayID = as.factor(paste0(thetaID, "_", phiID)))
voxelGrid$ID <- 1:nrow(voxelGrid)
# Work with Real LiDAR ----------------------------------------------------
#Extract coordinates
cld <- as.data.frame(cbind(x=tlsData@data$X,
y=tlsData@data$Y,
z=tlsData@data$Z))
#Math to calculate where ray would intersect a sphere with a radius of 1,000 m (the reference sphere)
cld$a <- cld$x^2 + cld$y^2 + cld$z^2
cld$t1 <- -sqrt(0^2-(4*cld$a*(-maxD^2)))/(2*cld$a)
cld$t2 <- sqrt(0^2-(4*cld$a*(-maxD^2)))/(2*cld$a)
cld$x1 <- cld$x*cld$t1
cld$y1 <- cld$y*cld$t1
cld$z1 <- cld$z*cld$t1
cld$x2 <- cld$x*cld$t2
cld$y2 <- cld$y*cld$t2
cld$z2 <- cld$z*cld$t2
cld$slp <- cld$z/(sqrt(cld$x^2+ cld$y^2))
cld$slp1 <- cld$z1/(sqrt(cld$x1^2+ cld$y1^2))
cld$slp2 <- cld$z2/(sqrt(cld$x2^2+ cld$y2^2))
#Find correct coordinate based on slope
cld<-cld %>% mutate(xs = case_when(sign(slp)==sign(slp1)~ x1,sign(slp)!=sign(slp1)~x2),
ys = case_when(sign(slp)==sign(slp1)~ y1,sign(slp)!=sign(slp1)~y2),
zs = case_when(sign(slp)==sign(slp1)~ z1,sign(slp)!=sign(slp1)~z2))
#Get spherical coordinates in radians
actualPulses <- as.data.frame(cart2sph(x=cld$xs,
y=cld$ys,
z=cld$zs))
actualPulses <- actualPulses[,c(1,2)]
#Convert radian coordinates to degrees
actualPulses$theta <- actualPulses$theta*(180/pi)
actualPulses$phi <- actualPulses$phi*(180/pi)
#Define grid of regularly spaced coordinates (theta, phi)
phiSeq <- seq(minPhi, maxPhi, phiStep)
thetaSeq <- seq(minTheta, maxTheta, thetaStep)
scanGrid = expand.grid(theta= thetaSeq,
phi= phiSeq)
names(scanGrid) <- c("theta", "phi")
#Find the actual coordinate that is closest to each new coordinate
kDist <- FNN::get.knnx(as.matrix(actualPulses),
as.matrix(scanGrid),
algo="kd_tree", k=1)
scanGrid$matchDist = as.vector(kDist$nn.dist)
#Filter out new coordinates that are more than specified distance from actual coordinates (estimate of pulses without returns)
newPulses <- scanGrid |>
filter(matchDist > thetaStep-tolerance) |>
dplyr::select(theta, phi)
combinedPulses <- bind_rows(actualPulses, newPulses)
voxelGrid2 <- voxelGrid |>
dplyr::select(theta, phi)
voxelGrid3 <- voxelGrid
kDistActual <- FNN::get.knnx(as.matrix(actualPulses),
as.matrix(voxelGrid2),
algo="kd_tree",
k=1)
kDistAll <- FNN::get.knnx(as.matrix(combinedPulses),
as.matrix(voxelGrid2),
algo="kd_tree",
k=1)
actualIndices <-data.frame(ID= kDistActual$nn.index) |>
group_by(ID) |>
summarize(returns = n()) |>
ungroup()
voxelGrid <- voxelGrid |>
left_join(actualIndices, by="ID") |>
mutate(across(everything(), ~ tidyr::replace_na(., 0)))
rayCnts <- voxelGrid |>
group_by(rayID) |>
summarize(pathPulses = sum(allPulses),
pathReturns = sum(allReturns)) |>
ungroup() |>
dplyr::select(rayID, pathPulses, pathReturns)
voxelGrid3 <- voxelGrid
returns <-data.frame(ID= kDistActual$nn.index) |>
group_by(ID) |>
summarize(returns = n()) |>
ungroup()
voxelGrid2 <- voxelGrid |>
dplyr::select(theta, phi)
voxelGrid3 <- voxelGrid
kDistActual <- FNN::get.knnx(as.matrix(actualPulses),
as.matrix(voxelGrid2),
algo="kd_tree",
k=1)
kDistAll <- FNN::get.knnx(as.matrix(combinedPulses),
as.matrix(voxelGrid2),
algo="kd_tree",
k=1)
returns <-data.frame(ID= kDistActual$nn.index) |>
group_by(ID) |>
summarize(returns = n()) |>
ungroup()
pulses <- data.frame(ID= kDistAll$nn.index) |>
group_by(ID) |>
summarize(pulses = n()) |>
ungroup()
voxelGrid3 <- voxelGrid3 |>
left_join(returns, by="ID") |>
left_join(pulses, by="ID") |>
mutate(across(everything(), ~ tidyr::replace_na(., 0)))
View(voxelGrid3)
voxelGrid2 <- voxelGrid |>
dplyr::select(theta, phi)
voxelGrid3 <- voxelGrid
kDistActual <- FNN::get.knnx(as.matrix(actualPulses),
as.matrix(voxelGrid2),
algo="kd_tree",
k=1)
kDistAll <- FNN::get.knnx(as.matrix(combinedPulses),
as.matrix(voxelGrid2),
algo="kd_tree",
k=1)
returns <-data.frame(ID= kDistActual$nn.index) |>
group_by(ID) |>
summarize(returns = n()) |>
ungroup()
pulses <- data.frame(ID= kDistAll$nn.index) |>
group_by(ID) |>
summarize(pulses = n()) |>
ungroup()
voxelGrid3 <- voxelGrid3 |>
left_join(returns, by="ID") |>
left_join(pulses, by="ID") |>
mutate(across(everything(), ~ tidyr::replace_na(., 0)))
rayCnts <- voxelGrid3 |>
group_by(rayID) |>
summarize(pathPulses = sum(pulses),
pathReturns = sum(returns)) |>
ungroup() |>
dplyr::select(rayID, pathPulses, pathReturns) |>
dplyr::select(-pulses, -returns)
library(rlas)
library(dplyr)
library(geometry)
library(FNN)
library(spatialEco)
sHgt <- 2
minD <- -30.5
maxD <- 30.5
maxHght <- 50
voxSize <- 0.25
tolerance <- 0
minTheta <- -180
maxTheta <- 180
minPhi <- -60.3322
maxPhi <- 86.8053
thetaStep <- 0.0658972
phiStep <- 0.054425
tlsData <- readLAS("E:/warrenGrove/tlsData/lasData/original/pre/WG34.las")
# Make Voxel Grid ---------------------------------------------------------
#Define regular grid in Cartesian space
xCoords <- seq(minD, maxD, voxSize)
yCoords <- seq(minD, maxD, voxSize)
zCoords <- seq(sHgt, maxHght, voxSize)
voxelGrid <- expand.grid(X=xCoords, X=yCoords, X=zCoords)
#Calculate range distance from sensor to voxel center
voxelGrid <- voxelGrid |>
mutate(rng = sqrt(X^2 + X^2 + X^2))
library(rlas)
library(dplyr)
library(geometry)
library(FNN)
library(spatialEco)
sHgt <- 2
minD <- -30.5
maxD <- 30.5
maxHght <- 50
voxSize <- 0.25
tolerance <- 0
minTheta <- -180
maxTheta <- 180
minPhi <- -60.3322
maxPhi <- 86.8053
thetaStep <- 0.0658972
phiStep <- 0.054425
tlsData <- readLAS("E:/warrenGrove/tlsData/lasData/original/pre/WG34.las")
# Make Voxel Grid ---------------------------------------------------------
#Define regular grid in Cartesian space
xCoords <- seq(minD, maxD, voxSize)
yCoords <- seq(minD, maxD, voxSize)
zCoords <- seq(sHgt, maxHght, voxSize)
voxelGrid <- expand.grid(X=xCoords, X=yCoords, X=zCoords)
#Calculate range distance from sensor to voxel center
voxelGrid <- voxelGrid |>
mutate(rng = sqrt(X^2 + X^2 + X^2))
library(rlas)
library(dplyr)
library(geometry)
library(FNN)
library(spatialEco)
sHgt <- 2
minD <- -30.5
maxD <- 30.5
maxHght <- 50
voxSize <- 0.25
tolerance <- 0
minTheta <- -180
maxTheta <- 180
minPhi <- -60.3322
maxPhi <- 86.8053
thetaStep <- 0.0658972
phiStep <- 0.054425
tlsData <- readLAS("E:/warrenGrove/tlsData/lasData/original/pre/WG34.las")
# Make Voxel Grid ---------------------------------------------------------
#Define regular grid in Cartesian space
xCoords <- seq(minD, maxD, voxSize)
yCoords <- seq(minD, maxD, voxSize)
zCoords <- seq(sHgt, maxHght, voxSize)
voxelGrid <- expand.grid(X=xCoords, X=yCoords, X=zCoords)
#Calculate range distance from sensor to voxel center
voxelGrid <- voxelGrid |>
mutate(rng = sqrt(X^2 + X^2 + X^2))
library(rlas)
library(dplyr)
library(geometry)
library(FNN)
library(spatialEco)
sHgt <- 2
minD <- -30.5
maxD <- 30.5
maxHght <- 50
voxSize <- 0.25
tolerance <- 0
minTheta <- -180
maxTheta <- 180
minPhi <- -60.3322
maxPhi <- 86.8053
thetaStep <- 0.0658972
phiStep <- 0.054425
tlsData <- readLAS("E:/warrenGrove/tlsData/lasData/original/pre/WG34.las")
# Make Voxel Grid ---------------------------------------------------------
#Define regular grid in Cartesian space
xCoords <- seq(minD, maxD, voxSize)
yCoords <- seq(minD, maxD, voxSize)
zCoords <- seq(sHgt, maxHght, voxSize)
voxelGrid <- expand.grid(X=xCoords, X=yCoords, X=zCoords)
#Calculate range distance from sensor to voxel center
voxelGrid <- voxelGrid |>
mutate(rng = sqrt(X^2 + X^2 + X^2))
#Calculate range distance from sensor to voxel center
voxelGrid <- voxelGrid |>
mutate(rng = sqrt(X^2 + Y^2 + Z^2))
library(rlas)
library(dplyr)
library(geometry)
library(FNN)
library(spatialEco)
sHgt <- 2
minD <- -30.5
maxD <- 30.5
maxHght <- 50
voxSize <- 0.25
tolerance <- 0
minTheta <- -180
maxTheta <- 180
minPhi <- -60.3322
maxPhi <- 86.8053
thetaStep <- 0.0658972
phiStep <- 0.054425
tlsData <- readLAS("E:/warrenGrove/tlsData/lasData/original/pre/WG34.las")
# Make Voxel Grid ---------------------------------------------------------
#Define regular grid in Cartesian space
xCoords <- seq(minD, maxD, voxSize)
yCoords <- seq(minD, maxD, voxSize)
zCoords <- seq(sHgt, maxHght, voxSize)
voxelGrid <- expand.grid(X=xCoords, X=yCoords, X=zCoords)
#Calculate range distance from sensor to voxel center
voxelGrid <- voxelGrid |>
mutate(rng = sqrt(X^2 + Y^2 + Z^2))
library(readr)
library(tidverse)
library(tidyverse)
